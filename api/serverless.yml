service: api

stages:
  default:
    params:
      ordersTableName: "orders-table-${sls:stage}"
      productsTableName: "products-table-${sls:stage}"
      deliveriesTableName: "deliveries-table-${sls:stage}"
package:
  exclude:
    - node_modules/**
    - venv/**
    - __pycache__/**
    - .env
    - .dynamodb/**

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-dynamodb
  - serverless-offline
custom:
  wsgi:
    app: app.app

provider:
  name: aws
  runtime: python3.12
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [OrdersTable, Arn]
            - Fn::GetAtt: [ProductsTable, Arn]
            - Fn::GetAtt: [DeliveriesTable, Arn]
  httpApi:
    authorizers:
      someJwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !Sub https://cognito-idp.${aws:region}.amazonaws.com/${CognitoUserPool.UserPoolId}

        audience:
          - !GetAtt AppClient.ClientId

  environment:
    ORDERS_TABLE: ${param:ordersTableName}
    PRODUCTS_TABLE: ${param:productsTableName}
    DELIVERIES_TABLE: ${param:deliveriesTableName}

functions:
  orders-api:
    handler: wsgi_handler.handler
    events:
      - httpApi:
          path: /order
          method: ANY
          authorizer:
            name: someJwtAuthorizer
      - httpApi:
          path: /order/{proxy+}
          method: ANY
          authorizer:
            name: someJwtAuthorizer
      
  monitor-api:
    handler: wsgi_handler.handler
    events:
      - httpApi:
          path: /monitor
          method: ANY
          authorizer:
            name: someJwtAuthorizer
      - httpApi:
          path: /monitor/{proxy+}
          method: ANY
          authorizer:
            name: someJwtAuthorizer

  streamFunction:
      handler: monitor.streamFunction.handler
      events:
        - stream: 
            type: dynamodb
            arn:
              !GetAtt OrdersTable.StreamArn
resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: order_id
            AttributeType: S
        KeySchema:
          - AttributeName: order_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${param:ordersTableName}
        StreamSpecification:
          StreamViewType: NEW_IMAGE 
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${param:productsTableName}
    DeliveriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: delivery_id
            AttributeType: S
        KeySchema:
          - AttributeName: delivery_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${param:deliveriesTableName}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-UserPool
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6

    AppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - openid
        AllowedOAuthFlowsUserPoolClient: true
        ClientName: ${self:service}-${sls:stage}-UserPoolClient
        CallbackURLs:
          - !Sub https://${self:service}-${sls:stage}.execute-api.${aws:region}.amazonaws.com
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        UserPoolId: !GetAtt CognitoUserPool.UserPoolId
        SupportedIdentityProviders:
          - COGNITO

    HostedUI:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: !Join
          - "-"
          - - ${self:service}-${sls:stage}
            - !Ref AppClient
        UserPoolId: !GetAtt CognitoUserPool.UserPoolId

  Outputs:
    SignupURL:
      Value: !Sub https://${HostedUI}.auth.${aws:region}.amazoncognito.com/login?client_id=${AppClient}&response_type=token&scope=email+profile&redirect_uri=https://${self:service}-${sls:stage}.execute-api.${aws:region}.amazonaws.com
